diff --git a/src/Scanner.c b/src/Scanner.c
index 19a35a7..b47fb71 100644
--- a/src/Scanner.c
+++ b/src/Scanner.c
@@ -5,40 +5,15 @@
 // Implementation of type Scanner (the main Jess query object).
 // ==================================================================
 
+#include <stdlib.h>
+#include <string.h>
+
 #include "Scanner.h"
 #include "KdTree.h"
 #include "Region.h"
 #include "Annulus.h"
 #include "Join.h"
-#include <stdlib.h>
-#include <string.h>
-
-// ==================================================================
-// Local type CandidateSet
-// ==================================================================
-// count				Number of atoms in the set
-// atom[k]				Points to ATOM record for kth candidate
-// coord[k]				Points to coordinates for kth candidate
-// ==================================================================
-
-typedef struct _CandidateSet CandidateSet;
-
-struct _CandidateSet
-{
-	int count;
-	Atom **atom;
-	double **coord;
-};
-
-// ==================================================================
-// Declaration of methods of local type CandidateSet
-// ==================================================================
-// create(M,T,k)		Create from molecule M, atom k of T
-// free(S)				Free candidate set
-// ==================================================================
-
-static CandidateSet *CandidateSet_create(Molecule*,Template*,int);
-static void CandidateSet_free(CandidateSet*);
+#include "CandidateSet.h"
 
 // ==================================================================
 // type Scanner
@@ -97,7 +72,7 @@ Scanner *Scanner_create(Molecule *M, Template *T,double r, double s)
 	for(k=0; k<n; k++)
 	{
 		S->index[k]=-1;
-		S->set[k]=CandidateSet_create(M,T,k);
+		S->set[k]=T->candidates(T,M,k);
 
 		if(S->set[k]->count==0)
 		{
@@ -259,49 +234,3 @@ Atom **Scanner_next(Scanner *S, int ignore_chain)
 }
 
 // ==================================================================
-// Methods of local type CandidateSet
-// ==================================================================
-
-static CandidateSet *CandidateSet_create(Molecule *M, Template *T, int k)
-{
-	CandidateSet *S;
-	Atom *A;
-	int n = Molecule_count(M);
-	int m;
-
-	S = (CandidateSet*)calloc(1,sizeof(CandidateSet));
-	S->atom=(Atom**)calloc(n,sizeof(Atom*));
-
-	for(m=0; m<n; m++)
-	{
-		A = (Atom*)Molecule_atom(M,m);
-		if(T->match(T,k,A))
-		{
-			S->atom[S->count]=A;
-			S->count++;
-		}
-	}
-
-	S->atom=(Atom**)realloc(S->atom,sizeof(Atom*)*S->count);
-	S->coord=(double**)calloc(S->count,sizeof(double*));
-
-	for(m=0; m<S->count; m++)
-	{
-		S->coord[m]=S->atom[m]->x;
-	}
-
-	return S;
-}
-
-static void CandidateSet_free(CandidateSet *S)
-{
-	if(S)
-	{
-		if(S->atom) free(S->atom);
-		if(S->coord) free(S->coord);
-		free(S);
-	}
-}
-
-// ==================================================================
-
