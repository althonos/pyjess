diff --git a/src/Jess.h b/src/Jess.h
index c90abe6..f5e3dd4 100644
--- a/src/Jess.h
+++ b/src/Jess.h
@@ -8,6 +8,8 @@
 #ifndef JESS_H
 #define JESS_H
 
+#include <stdbool.h>
+
 #include "Super.h"
 #include "Molecule.h"
 #include "Template.h"
@@ -29,13 +31,13 @@ typedef struct _JessQuery JessQuery;
 // create()				Create a Jess module
 // free(J)				Free Jess object J (AND all templates)
 // addTemplate(J,T)		Add T to the list of templates for J
-// query(J,M,t)			Start a query on M using J threshold t
+// query(J,M,t,s)		Start a query on M using J threshold t
 // ==================================================================
 
 extern Jess *Jess_create(void);
 extern void Jess_free(Jess*);
 extern void Jess_addTemplate(Jess*,Template*);
-extern JessQuery *Jess_query(Jess*,Molecule*,double,double);
+extern JessQuery *Jess_query(Jess*,Molecule*,double,double,bool);
 
 // ==================================================================
 // Methods of type JessQuery
@@ -50,10 +52,10 @@ extern JessQuery *Jess_query(Jess*,Molecule*,double,double);
 
 extern void JessQuery_free(JessQuery*);
 extern int JessQuery_next(JessQuery*, int);
-extern Template *JessQuery_template(JessQuery*);
-extern const Molecule *JessQuery_molecule(JessQuery*);
-extern Atom **JessQuery_atoms(JessQuery*);
-extern Superposition *JessQuery_superposition(JessQuery*);
+extern Template *JessQuery_template(const JessQuery*);
+extern const Molecule *JessQuery_molecule(const JessQuery*);
+extern Atom **JessQuery_atoms(const JessQuery*);
+extern Superposition *JessQuery_superposition(const JessQuery*);
 
 // ==================================================================
 
