diff --git a/src/CandidateSet.h b/src/CandidateSet.h
new file mode 100644
index 0000000..14750ac
--- /dev/null
+++ b/src/CandidateSet.h
@@ -0,0 +1,61 @@
+// ==================================================================
+// CandidateSet.h
+// Copyright (c) Jonathan Barker, 2002
+// Copyright (c) Martin Larralde, 2025
+// ==================================================================
+// Declaration of type CandidateSet.
+// ==================================================================
+
+#ifndef CANDIDATESET_H
+#define CANDIDATESET_H
+
+#include "Atom.h"
+#include "Molecule.h"
+
+// ==================================================================
+// Type CandidateSet
+// ==================================================================
+// count				Number of atoms in the set
+// capacity				Max number of elements allocated in atom[]
+// atom[k]				Points to ATOM record for kth candidate
+// coord[k]				Points to coordinates for kth candidate
+// ==================================================================
+
+struct _CandidateSet
+{
+	size_t count;
+	size_t capacity;
+	Atom **atom;
+	const double **coord;
+};
+
+typedef struct _CandidateSet CandidateSet;
+
+// ==================================================================
+// Declaration of methods of local type CandidateSet
+// ==================================================================
+// create()				Create new empty candidate set
+// reuse(S,n)			Reuse candidate set S for up to n atoms
+// free(S)				Free candidate set
+// recordCoordinates(S)	Record coordinates from the set atoms
+// addAtom(S,A)			Add atom A to candidate set S
+// ==================================================================
+
+CandidateSet *CandidateSet_create();
+CandidateSet *CandidateSet_reuse(CandidateSet *S, int n);
+void CandidateSet_free(CandidateSet*);
+
+static inline void CandidateSet_recordCoordinates(CandidateSet *S)
+{
+	int m;
+	for(m=0; m<S->count; m++)
+		S->coord[m]=S->atom[m]->x;
+}
+
+static inline void CandidateSet_addAtom(CandidateSet *S, Atom *A)
+{
+	S->atom[S->count]=A;
+	S->count++;
+}
+
+#endif
\ No newline at end of file
