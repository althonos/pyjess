diff --git a/src/TessAtom.c b/src/TessAtom.c
index e1cce1a..f3b02ce 100644
--- a/src/TessAtom.c
+++ b/src/TessAtom.c
@@ -26,21 +26,6 @@
 // distWeight[k]			kth atom distance threshold modifier (weight)
 // ==================================================================
 
-struct _TessAtom
-{
-	int code;
-	int resSeq;
-	int nameCount;
-	int resNameCount;
-	char chainID1; //Riziotis edit
-	char chainID2;
-	//char chainID; 
-	char **name;
-	char **resName;
-	double pos[3];
-	double distWeight;
-};
-
 // ==================================================================
 // Methods of type TessAtom (ARGGH!!!)
 // ==================================================================
@@ -258,6 +243,66 @@ TessAtom *TessAtom_create(const char *s)
 	return A;
 }
 
+TessAtom *TessAtom_copy(const TessAtom *A)
+{
+	int ac;
+	int rc;
+	int rq;
+	int m;
+	void* p;
+	TessAtom* B;
+
+	// get allocation size
+	ac = A->nameCount;
+	rc = A->resNameCount;
+	rq = sizeof(TessAtom);
+	rq += sizeof(char*)*(ac+rc);
+	rq += sizeof(char)*(5*ac+4*rc);
+
+	// allocate new atom
+	B = (TessAtom*)calloc(1,rq);
+
+	// copy all fields including string data from original Atom
+	memcpy(B, A, rq);
+
+	// set pointers to string data
+	p=&B[1];
+	B->name=p;
+	p+=sizeof(char*)*ac;
+	for(m=0; m<ac; m++)
+	{
+		B->name[m]=p;
+		p+=5;
+	}
+
+	B->resName=p;
+	p+=sizeof(char*)*rc;
+	for(m=0; m<rc; m++)
+	{
+		B->resName[m]=p;
+		p+=4;
+	}
+
+	return B;
+}
+
+double TessAtom_distance(const TessAtom* A1, const TessAtom* A2)
+{
+	int k;
+	double tmp, dist;
+	const double* x = TessAtom_position(A1);
+	const double* y = TessAtom_position(A2);
+
+	dist = 0.0;
+	for(k=0; k<3; k++)
+	{
+		tmp = x[k]-y[k];
+		dist += tmp*tmp;
+	}
+
+	return sqrt(dist);
+}
+
 //Riziotis edit
 char TessAtom_chainID1(const TessAtom *A)
 {
