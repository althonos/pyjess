diff --git a/src/TessTemplate.h b/src/TessTemplate.h
index 1e597f2..0adb79c 100644
--- a/src/TessTemplate.h
+++ b/src/TessTemplate.h
@@ -9,7 +9,84 @@
 #define TESSTEMPLATE_H
 
 #include "Template.h"
+#include "TessAtom.h"
 #include <stdio.h>
+#include <string.h>
+#include <math.h>
+
+typedef struct _TessTemplate TessTemplate;
+
+struct _TessTemplate
+{
+	int count;
+	TessAtom **atom;
+	double **distance;
+	char *symbol;
+	int dim;
+};
+
+// ==================================================================
+// Oracles of type TessTemplate
+// ==================================================================
+
+static inline int TessTemplate_count(const Template *T)
+{
+	const TessTemplate *J = (const TessTemplate*)&T[1];
+	return J->count;
+}
+
+static inline int TessTemplate_match(const Template *T,int k,const Atom *A)
+{
+	const TessTemplate *J = (const TessTemplate*)&T[1];
+	return TessAtom_match(J->atom[k],A);
+}
+
+static inline int TessTemplate_range(const Template *T,int i,int j,double *a,double *b)
+{
+	const TessTemplate *J = (const TessTemplate*)&T[1];
+	*a = *b = J->distance[i][j];
+	return 1;
+}
+
+static inline const double *TessTemplate_position(const Template *T, int k)
+{
+	const TessTemplate *J=(const TessTemplate*)&T[1];
+	return TessAtom_position(J->atom[k]);
+}
+
+static inline double TessTemplate_distWeight(const Template *T, int k)
+{
+	const TessTemplate *J=(const TessTemplate*)&T[1];
+	return TessAtom_distWeight(J->atom[k]);
+}
+
+extern int TessTemplate_check(const Template *T, Atom **A, int k, int ignore_chain);
+
+static inline const char *TessTemplate_name(const Template *T)
+{
+	const TessTemplate *J = (const TessTemplate*)&T[1];
+	return J->symbol;
+}
+
+static inline double TessTemplate_logE(const Template *T,double rmsd, int n)
+{
+	const TessTemplate *J = (const TessTemplate*)&T[1];
+	const double logA = -8.5;
+	const double alpha = 2.5;
+	const double beta = -0.7;
+
+	// Approximate number of hits per molecule atom is:
+	// A * rmsd^alpha * J->dim^beta (empirically). This gives
+	// us log(expected number of hits in molecule of size n)
+
+	return logA + alpha*rmsd + beta*(double)J->dim + log((double)n);
+}
+
+// ==================================================================
+// Private methods of type TessTemplate
+// ==================================================================
+
+extern void TessTemplate_free(Template *T);
 
 // ==================================================================
 // Creation of a TessTemplate object
@@ -18,6 +95,7 @@
 // ==================================================================
 
 extern Template *TessTemplate_create(FILE*,const char*);
+extern Template *TessTemplate_copy(const Template*);
 
 // ==================================================================
 
