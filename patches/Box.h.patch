diff --git a/src/Box.h b/src/Box.h
new file mode 100644
index 0000000..9d8693b
--- /dev/null
+++ b/src/Box.h
@@ -0,0 +1,80 @@
+// ==================================================================
+// Box.h
+// Copyright (c) Martin Larralde, 2025
+// ==================================================================
+// Declaration of Box construction and destruction.
+// ==================================================================
+
+#ifndef BOX_H
+#define BOX_H
+
+#include "Region.h"
+#include <math.h>
+
+#define BOX_DIM 3
+
+// ==================================================================
+// type Annulus
+// ==================================================================
+// centre				The center of the annulus
+// min,max				Limits of the radii
+// dim					The dimension of the space
+// ==================================================================
+
+struct _Box
+{
+	double min[BOX_DIM];
+	double max[BOX_DIM];
+};
+
+typedef struct _Box Box;
+
+// ==================================================================
+// Methods for Annulus manipulation
+// ==================================================================
+// create(a,b)			Make region {x in R^3 : a_i <= x_i <= b_i }.
+// free(A)				Free the region given (or use R->free)
+// ==================================================================
+
+extern Box *Box_create(const double* restrict, const double* restrict);
+extern void Box_free(Box*);
+
+// ==================================================================
+// Oracles
+// ==================================================================
+
+// int Box_po(Region *vA, double *x);
+// int Box_ro(Region *vA, double *minBox, double *maxBox);
+
+static inline int _Box_po(const Box *B, const double *x)
+{
+	int i;
+
+	// Does x lie within box B?
+
+    for(i=0;i<BOX_DIM;i++)
+        if(!((x[i]>=B->min[i]) && (x[i]<=B->max[i])))
+            return 0;
+
+    return 1;
+}
+
+static inline int _Box_ro(const Box *B, const double* restrict minBox, const double* restrict maxBox)
+{
+	int i;
+
+	// Does the box region [minBox,maxBox] intersect the box B?
+
+	for(i=0; i<BOX_DIM; i++)
+        if((minBox[i]>B->max[i]) || (B->min[i]>maxBox[i]))
+            return 0;
+
+	return 1;
+}
+
+// ==================================================================
+
+#undef min
+#undef max
+#endif
+
